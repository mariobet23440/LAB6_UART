
Lab6_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dd  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d9  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018e  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8e:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUART>:

// FUNCIONES DE USART

void initUART() {
    // Paso 1: Configurar pines PD1 (TX) como salida y PD0 (RX) como entrada
    DDRD |= (1 << DDD1);   // TX (PD1) como salida
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << DDD0);  // RX (PD0) como entrada
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10

    // Paso 2: UCSR0A
    UCSR0A = 0;
  a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

    // Paso 3: Habilitar recepción, transmisión y la interrupción por recepción
    UCSR0B |= (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 69       	ori	r24, 0x98	; 152
  ae:	80 83       	st	Z, r24

    // Paso 4: Configurar 8 bits de datos, 1 bit de parada, sin paridad
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24

    // Paso 5: Configurar baud rate a 9600 (para F_CPU = 16MHz -> UBRR0 = 103)
    UBRR0 = 103;
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c6:	08 95       	ret

000000c8 <writeChar>:
}

void writeChar(char caracter) {
    while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer esté listo
  c8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  cc:	95 ff       	sbrs	r25, 5
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <writeChar>
    UDR0 = caracter;                   // Enviar carácter
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d4:	08 95       	ret

000000d6 <writeString>:
}

void writeString(char* texto) {
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	8c 01       	movw	r16, r24
    for (unsigned int i = 0; texto[i] != '\0'; i++) {
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	03 c0       	rjmp	.+6      	; 0xec <writeString+0x16>
        writeChar(texto[i]);
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
    while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer esté listo
    UDR0 = caracter;                   // Enviar carácter
}

void writeString(char* texto) {
    for (unsigned int i = 0; texto[i] != '\0'; i++) {
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	f8 01       	movw	r30, r16
  ee:	ec 0f       	add	r30, r28
  f0:	fd 1f       	adc	r31, r29
  f2:	80 81       	ld	r24, Z
  f4:	81 11       	cpse	r24, r1
  f6:	f7 cf       	rjmp	.-18     	; 0xe6 <writeString+0x10>
        writeChar(texto[i]);
    }
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <setup>:

// SETUP Y LOOP PRINCIPAL

void setup(void) {
    cli();       // Desactivar interrupciones globales
 102:	f8 94       	cli
    initUART();  // Inicializar USART
 104:	0e 94 4b 00 	call	0x96	; 0x96 <initUART>
    sei();       // Activar interrupciones globales
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <main>:
}

int main(void) {
    setup();
 10c:	0e 94 81 00 	call	0x102	; 0x102 <setup>
    writeString("HOLA\r\n");
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 6b 00 	call	0xd6	; 0xd6 <writeString>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0xc>

0000011a <__vector_18>:
    while (1);  // Loop principal (espera pasiva)
}

// INTERRUPCIÓN AL RECIBIR DATOS

ISR(USART_RX_vect) {
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	cf 93       	push	r28
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
    char recibido = UDR0;  // Leer carácter recibido
 13e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    writeString("Texto:");
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 6b 00 	call	0xd6	; 0xd6 <writeString>
    writeChar(recibido);   // Reenviar el carácter recibido
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
    writeChar('\r');
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
    writeChar('\n');
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	cf 91       	pop	r28
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
