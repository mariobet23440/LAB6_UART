
Lab6_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000163  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  8e:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
#include <avr/interrupt.h>

// Inicialización UART a 9600 baudios
void UART_init(void) {
	// Configura TX como salida, RX como entrada
	DDRD |= (1 << PD1);   // TX
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD0);  // RX
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10

	// Configura baud rate a 9600 (F_CPU = 16 MHz)
	// UBRR = (F_CPU / (16 * BAUD)) - 1 = 103
	UBRR0 = 103;
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita recepción, transmisión e interrupción de recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  ae:	88 e9       	ldi	r24, 0x98	; 152
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	08 95       	ret

000000bc <UART_sendChar>:
}

// Enviar un carácter
void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera buffer libre
  bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <UART_sendChar>
	UDR0 = c;
  c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c8:	08 95       	ret

000000ca <UART_sendString>:
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
	while (*str) 
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <UART_sendString+0xe>
	{
		UART_sendChar(*str++);
  d2:	21 96       	adiw	r28, 0x01	; 1
  d4:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendChar>
	UDR0 = c;
}

// Enviar una cadena de texto
void UART_sendString(const char* str) {
	while (*str) 
  d8:	88 81       	ld	r24, Y
  da:	81 11       	cpse	r24, r1
  dc:	fa cf       	rjmp	.-12     	; 0xd2 <UART_sendString+0x8>
	{
		UART_sendChar(*str++);
	}
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <DisplayInPORTBD>:

void DisplayInPORTBD(char data)
{
	// Limpiar los bits PD2 a PD5 de PORTD, sin afectar PD0 y PD1
	PORTD &= 0x03;  // 0x03 es 00000011, no afecta a PD2-PD5
  e4:	9b b1       	in	r25, 0x0b	; 11
  e6:	93 70       	andi	r25, 0x03	; 3
  e8:	9b b9       	out	0x0b, r25	; 11

	// Mostrar el nibble bajo de `data` (los 4 bits más bajos) en PORTD (PD2-PD5)
	PORTD |= (data & 0x0F) << 2;  // Escribir solo el nibble bajo (los 4 bits más bajos)
  ea:	4b b1       	in	r20, 0x0b	; 11
  ec:	98 2f       	mov	r25, r24
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	29 2f       	mov	r18, r25
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	24 2b       	or	r18, r20
  fe:	2b b9       	out	0x0b, r18	; 11

	// Mostrar el nibble alto de `data` (los 4 bits más altos) en PORTB (PB0-PB3)
	PORTB = (data & 0xF0) >> 4;  // Escribir el nibble alto en PB0-PB3
 100:	82 95       	swap	r24
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	85 b9       	out	0x05, r24	; 5
 106:	08 95       	ret

00000108 <__vector_18>:
}



// Interrupción al recibir carácter
ISR(USART_RX_vect) {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	cf 93       	push	r28
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	char data = UDR0;     // Leer carácter recibido
 12c:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	DisplayInPORTBD(data);
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 72 00 	call	0xe4	; 0xe4 <DisplayInPORTBD>
	UART_sendChar(data);  // Hacer echo del carácter
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendChar>
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	cf 91       	pop	r28
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <setup>:

void setup(void)
{
	// Habilitar salida en PD2 a PD5
	DDRD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5);
 160:	8a b1       	in	r24, 0x0a	; 10
 162:	8c 63       	ori	r24, 0x3C	; 60
 164:	8a b9       	out	0x0a, r24	; 10
	
	// Habilitar salida en PB0 a PB3
	DDRB |= 0X0F;
 166:	84 b1       	in	r24, 0x04	; 4
 168:	8f 60       	ori	r24, 0x0F	; 15
 16a:	84 b9       	out	0x04, r24	; 4
 16c:	08 95       	ret

0000016e <main>:
}

int main(void) {
	cli();           // Desactiva interrupciones
 16e:	f8 94       	cli
	setup();
 170:	0e 94 b0 00 	call	0x160	; 0x160 <setup>
	UART_init();     // Inicializa UART
 174:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
	sei();           // Activa interrupciones
 178:	78 94       	sei

	UART_sendString("Hola desde UART!\r\n");
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 65 00 	call	0xca	; 0xca <UART_sendString>
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0x14>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
